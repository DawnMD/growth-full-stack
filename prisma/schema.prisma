// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum UserType {
    STUDENT
    EMPLOYEE
    PARENT
}

// model User {
//     id             String   @id @default(cuid())
//     clerkId        String   @unique
//     firstName      String
//     lastName       String?
//     age            Int
//     type           UserType @default(STUDENT)
//     gender         Gender?
//     height         Height[]
//     weight         Weight[]
//     heightsAdded   Height[] @relation("heightAddedBy")
//     weightsAdded   Weight[] @relation("weightAddedBy")
//     state          String?
//     controlledBy   User?    @relation("controlledBy", fields: [controlledById], references: [clerkId], onDelete: SetNull, onUpdate: Cascade)
//     controlledById String?

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
//     User      User[]

//     @@index([clerkId])
// }

// model Height {
//     id        String   @id @default(cuid())
//     height    Int
//     userId    String
//     addedBy   User?    @relation("heightAddedBy", fields: [addedById], references: [clerkId], onDelete: SetNull, onUpdate: Cascade)
//     addedById String?
//     user      User     @relation(fields: [userId], references: [clerkId], onDelete: Cascade, onUpdate: Cascade)
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     @@index([userId])
//     @@index([addedById])
// }

// model Weight {
//     id        String   @id @default(cuid())
//     weight    Int
//     userId    String
//     addedBy   User?    @relation("weightAddedBy", fields: [addedById], references: [clerkId], onDelete: SetNull, onUpdate: Cascade)
//     addedById String?
//     user      User     @relation(fields: [userId], references: [clerkId], onDelete: Cascade, onUpdate: Cascade)
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     @@index([userId])
//     @@index([addedById])
// }

model Employee {
    id        String   @id @default(cuid())
    clerkId   String   @unique
    firstName String
    lastName  String?
    gender    Gender?
    type      UserType @default(EMPLOYEE)

    students Student[]
    heights  Height[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Weight    Weight[]

    @@index([clerkId])
}

model Student {
    id        String   @id @default(cuid())
    clerkId   String   @unique
    firstName String
    lastName  String?
    gender    Gender?
    type      UserType @default(STUDENT)
    age       Int
    state     String

    controlledByEmployee   Employee? @relation(fields: [controlledByEmployeeId], references: [clerkId], onDelete: SetNull, onUpdate: Cascade)
    controlledByEmployeeId String?
    heights                Height[]
    weights                Weight[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([clerkId])
    @@index([controlledByEmployeeId])
}

model Height {
    id        String    @id @default(cuid())
    height    Int
    studentId String?
    student   Student?  @relation(fields: [studentId], references: [clerkId], onDelete: Cascade, onUpdate: Cascade)
    addedBy   Employee? @relation(fields: [addedById], references: [clerkId], onDelete: SetNull, onUpdate: Cascade)
    addedById String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([studentId])
    @@index([addedById])
}

model Weight {
    id        String    @id @default(cuid())
    weight    Int
    studentId String?
    student   Student?  @relation(fields: [studentId], references: [clerkId], onDelete: Cascade, onUpdate: Cascade)
    addedBy   Employee? @relation(fields: [addedById], references: [clerkId], onDelete: SetNull, onUpdate: Cascade)
    addedById String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([studentId])
}
